{
    "docs": [
        {
            "location": "/",
            "text": "rbx-ui\n\n\nrbx-ui is a user interface toolkit based on \nRoact\n. Its purpose is to provide implementations of common, simple user interface elements to demonstrate Roact's power and flexibility. Elements are designed to support as many Roblox properties as feasible - a rbx-ui element should have an API similar to (though not necessarily exactly equivalent to) a GuiObject, plus some extra properties.\n\n\nInstallation\n\n\nTo install rbx-ui, you'll need to first install Roact from its repository. Follow the instructions there.\n\n\n\n\nWarning\n\n\nrbx-ui assumes that you will install Roact in the recommended location of \nReplicatedStorage\n. If you choose not to do this, you will need to update the install location in \nevery\n file. This process will change later - keep an eye on \nissue #1\n for more info.\n\n\n\n\nOnce you've installed Roact, you can install rbx-ui in one of two ways:\n\n\nInstallation from Release\n\n\n\n\nInfo\n\n\nThis method is coming soon - there isn't a current release of rbx-ui yet. Check back later!\n\n\n\n\nDownload the \ninstaller.lua\n file from the \nlatest release\n and run it in Studio (look for \"Run Script\" in the Test tab). Install rbx-ui anywhere you like - we suggest \nReplicatedStorage.UI\n, as this is where the examples assume it is installed.\n\n\nInstallation from Development\n\n\nDownload the repository and use \nRojo\n to synchronize the \nsrc\n and \nexamples\n directories to a Studio window. Just run \nrojo serve\n from a command prompt in the repository's directory, then pull it into Studio.\n\n\nUsage\n\n\nTODO\n\n\nExamples\n\n\nrbx-ui has a bunch of examples. These are used to test elements as they are written, and they also serve as effective demonstrations of the various elements. You can see all the current examples in the \nexamples\n directory of the repository.",
            "title": "Introduction"
        },
        {
            "location": "/#rbx-ui",
            "text": "rbx-ui is a user interface toolkit based on  Roact . Its purpose is to provide implementations of common, simple user interface elements to demonstrate Roact's power and flexibility. Elements are designed to support as many Roblox properties as feasible - a rbx-ui element should have an API similar to (though not necessarily exactly equivalent to) a GuiObject, plus some extra properties.",
            "title": "rbx-ui"
        },
        {
            "location": "/#installation",
            "text": "To install rbx-ui, you'll need to first install Roact from its repository. Follow the instructions there.   Warning  rbx-ui assumes that you will install Roact in the recommended location of  ReplicatedStorage . If you choose not to do this, you will need to update the install location in  every  file. This process will change later - keep an eye on  issue #1  for more info.   Once you've installed Roact, you can install rbx-ui in one of two ways:",
            "title": "Installation"
        },
        {
            "location": "/#installation-from-release",
            "text": "Info  This method is coming soon - there isn't a current release of rbx-ui yet. Check back later!   Download the  installer.lua  file from the  latest release  and run it in Studio (look for \"Run Script\" in the Test tab). Install rbx-ui anywhere you like - we suggest  ReplicatedStorage.UI , as this is where the examples assume it is installed.",
            "title": "Installation from Release"
        },
        {
            "location": "/#installation-from-development",
            "text": "Download the repository and use  Rojo  to synchronize the  src  and  examples  directories to a Studio window. Just run  rojo serve  from a command prompt in the repository's directory, then pull it into Studio.",
            "title": "Installation from Development"
        },
        {
            "location": "/#usage",
            "text": "TODO",
            "title": "Usage"
        },
        {
            "location": "/#examples",
            "text": "rbx-ui has a bunch of examples. These are used to test elements as they are written, and they also serve as effective demonstrations of the various elements. You can see all the current examples in the  examples  directory of the repository.",
            "title": "Examples"
        },
        {
            "location": "/contributing/",
            "text": "Contributing\n\n\nAnyone can contribute to rbx-ui on GitHub. Here are some general guidelines for doing so:\n\n\n\n\nOpen an issue\n before opening a PR. This gives you an easy channel to communicate with other contributors about the feature, and gives us the opportunity to let you know if your issue's already been mentioned before.\n\n\nUse tabs for indentation.\n\n\nIf you're adding an element, create and commit an example with it.\n\n\nrbx-ui favors simplicity over efficiency. The only exception to this is where optimization is \nnecessary\n to make the component usable. If you must favor efficiency over simplicity, explain why in comments, so it's not simplified later down the line.\n\n\nThis doesn't mean you can't be efficient; it means you shouldn't micro-optimize. Don't clutter the code for the sole purpose of making it faster or more memory-efficient.\n\n\n\n\n\n\nDon't open PRs for half-finished features. Finish them, then open a PR.\n\n\n\n\nBuilding the Documentation\n\n\nTo build the documentation locally, you'll need \nMkDocs\n and \nMaterial for MkDocs\n. You can install them easily using the Python package manager \npip\n:\n\n\n> pip install mkdocs mkdocs-material\n\n\n\n\nOnce everything's installed, in a terminal at the root of the project, run \nmkdocs serve\n to start a local server for the documentation.\n\n\n\n\nNote\n\n\nThis project's MkDocs server runs on \nport 8080\n, not the default of port 8000, because Rojo's port is also 8000. To access the local documentation server, go to \nhttp://localhost:8080\n.",
            "title": "Contributing"
        },
        {
            "location": "/contributing/#contributing",
            "text": "Anyone can contribute to rbx-ui on GitHub. Here are some general guidelines for doing so:   Open an issue  before opening a PR. This gives you an easy channel to communicate with other contributors about the feature, and gives us the opportunity to let you know if your issue's already been mentioned before.  Use tabs for indentation.  If you're adding an element, create and commit an example with it.  rbx-ui favors simplicity over efficiency. The only exception to this is where optimization is  necessary  to make the component usable. If you must favor efficiency over simplicity, explain why in comments, so it's not simplified later down the line.  This doesn't mean you can't be efficient; it means you shouldn't micro-optimize. Don't clutter the code for the sole purpose of making it faster or more memory-efficient.    Don't open PRs for half-finished features. Finish them, then open a PR.",
            "title": "Contributing"
        },
        {
            "location": "/contributing/#building-the-documentation",
            "text": "To build the documentation locally, you'll need  MkDocs  and  Material for MkDocs . You can install them easily using the Python package manager  pip :  > pip install mkdocs mkdocs-material  Once everything's installed, in a terminal at the root of the project, run  mkdocs serve  to start a local server for the documentation.   Note  This project's MkDocs server runs on  port 8080 , not the default of port 8000, because Rojo's port is also 8000. To access the local documentation server, go to  http://localhost:8080 .",
            "title": "Building the Documentation"
        }
    ]
}